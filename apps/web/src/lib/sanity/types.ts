/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Code>;

export type ProjectImage = {
  _type: "projectImage";
  index: number;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Description = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Tool = {
  _id: string;
  _type: "tool";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  href?: string;
  iconSource: "react-icons" | "custom";
  iconName?: string;
  iconSvg?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  index: number;
  question: string;
  answer: string;
};

export type Metadata = {
  _id: string;
  _type: "metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  title: string;
  description: string;
};

export type Experience = {
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  location: string;
  partTime?: boolean;
  duration: Duration;
  company: Company;
  tools?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tool";
  }>;
  description: Description;
};

export type Company = {
  _type: "company";
  name: string;
  label: string;
  href: string;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Duration = {
  _type: "duration";
  from: string;
  to?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug?: Slug;
  featured?: boolean;
  date: string;
  status: "completed" | "ongoing" | "paused";
  description: string;
  href?: string;
  source?: string;
  tools: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tool";
  }>;
  images?: Array<{
    _key: string;
  } & ProjectImage>;
  contentTitle?: string;
  content?: BlockContent;
};

export type AboutMe = {
  _id: string;
  _type: "aboutMe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  bio: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  stats: Stats;
};

export type Stats = {
  _type: "stats";
  clients: number;
  experience: number;
  projects: number;
  contributions: number;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlockContent | ProjectImage | Description | Tool | Faq | Metadata | Experience | Company | Duration | Project | AboutMe | Stats | Code | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/src/lib/sanity/queries.ts
// Variable: getAboutMe
// Query: *[_type == "aboutMe"]{  name,  bio,  "imageUrl": image.asset->url,  stats}[0]
export type GetAboutMeResult = {
  name: string;
  bio: string;
  imageUrl: string | null;
  stats: Stats;
} | null;
// Variable: getMainImage
// Query: *[_type == "aboutMe"]{  "imageUrl": image.asset->url,}[0]
export type GetMainImageResult = {
  imageUrl: string | null;
} | null;
// Variable: getExperiences
// Query: *[_type == "experience"]{  title,  location,  partTime,  duration,  company,  description,  "logo": company.logo.asset->url,  tools[]->{    name,    href,    iconSource,    iconName,    "iconSvg": iconSvg.asset->url  },} | order(duration.from desc)
export type GetExperiencesResult = Array<{
  title: string;
  location: string;
  partTime: boolean | null;
  duration: Duration;
  company: Company;
  description: Description;
  logo: string | null;
  tools: Array<{
    name: string;
    href: string | null;
    iconSource: "custom" | "react-icons";
    iconName: string | null;
    iconSvg: string | null;
  }> | null;
}>;
// Variable: getFeaturedProjects
// Query: *[_type == "project" && featured == true]{  title,  slug,  featured,  date,  status,  description,  href,  source,  tools[]->{   name,    href,    iconSource,    iconName,    "iconSvg": iconSvg.asset->url  },   "mainImage": images[0].image.asset->url}[0..1] | order(date desc)
export type GetFeaturedProjectsResult = Array<{
  title: string;
  slug: Slug | null;
  featured: boolean | null;
  date: string;
  status: "completed" | "ongoing" | "paused";
  description: string;
  href: string | null;
  source: string | null;
  tools: Array<{
    name: string;
    href: string | null;
    iconSource: "custom" | "react-icons";
    iconName: string | null;
    iconSvg: string | null;
  }>;
  mainImage: string | null;
}>;
// Variable: getProjectBySlug
// Query: *[_type == "project" && slug.current == $slug]{  title,  slug,  date,  status,  description,  href,  source,  tools[]->{    name,    href,    iconSource,    iconName,    "iconSvg": iconSvg.asset->url  },  "images": images[].image.asset->url,  contentTitle,  content,}[0]
export type GetProjectBySlugResult = {
  title: string;
  slug: Slug | null;
  date: string;
  status: "completed" | "ongoing" | "paused";
  description: string;
  href: string | null;
  source: string | null;
  tools: Array<{
    name: string;
    href: string | null;
    iconSource: "custom" | "react-icons";
    iconName: string | null;
    iconSvg: string | null;
  }>;
  images: Array<string | null> | null;
  contentTitle: string | null;
  content: BlockContent | null;
} | null;
// Variable: getProjectMetadata
// Query: *[_type == "project" && slug.current == $slug]{  slug,  description,  "images": images[0].image.asset->url,  contentTitle,}[0]
export type GetProjectMetadataResult = {
  slug: Slug | null;
  description: string;
  images: string | null;
  contentTitle: string | null;
} | null;
// Variable: getProjectsForSEO
// Query: *[_type == "project"]{  "slug": slug.current,  "publishedAt": date,}
export type GetProjectsForSEOResult = Array<{
  slug: string | null;
  publishedAt: string;
}>;
// Variable: getFaqs
// Query: *[_type == "faq"]{  index,  question,  answer,} | order(index asc)
export type GetFaqsResult = Array<{
  index: number;
  question: string;
  answer: string;
}>;
// Variable: getMetadata
// Query: *[_type == "metadata" && slug.current == $slug]{  "slug": slug.current,  title,  description,}[0]
export type GetMetadataResult = {
  slug: string;
  title: string;
  description: string;
} | null;
// Variable: getProjects
// Query: *[_type == "project"]{  title,  slug,  featured,  date,  status,  description,  href,  source,  tools[]->{    name,    href,    iconSource,    iconName,    "iconSvg": iconSvg.asset->url  },   "mainImage": images[0].image.asset->url} | order(date desc)
export type GetProjectsResult = Array<{
  title: string;
  slug: Slug | null;
  featured: boolean | null;
  date: string;
  status: "completed" | "ongoing" | "paused";
  description: string;
  href: string | null;
  source: string | null;
  tools: Array<{
    name: string;
    href: string | null;
    iconSource: "custom" | "react-icons";
    iconName: string | null;
    iconSvg: string | null;
  }>;
  mainImage: string | null;
}>;
// Variable: getTools
// Query: *[_type == "tool"]{  name,  href,  iconSource,  iconName,  "iconSvg": iconSvg.asset->url}
export type GetToolsResult = Array<{
  name: string;
  href: string | null;
  iconSource: "custom" | "react-icons";
  iconName: string | null;
  iconSvg: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"aboutMe\"]{\n  name,\n  bio,\n  \"imageUrl\": image.asset->url,\n  stats\n}[0]": GetAboutMeResult;
    "*[_type == \"aboutMe\"]{\n  \"imageUrl\": image.asset->url,\n}[0]": GetMainImageResult;
    "*[_type == \"experience\"]{\n  title,\n  location,\n  partTime,\n  duration,\n  company,\n  description,\n  \"logo\": company.logo.asset->url,\n  tools[]->{\n    name,\n    href,\n    iconSource,\n    iconName,\n    \"iconSvg\": iconSvg.asset->url\n  },\n} | order(duration.from desc)": GetExperiencesResult;
    "*[_type == \"project\" && featured == true]{\n  title,\n  slug,\n  featured,\n  date,\n  status,\n  description,\n  href,\n  source,\n  tools[]->{\n   name,\n    href,\n    iconSource,\n    iconName,\n    \"iconSvg\": iconSvg.asset->url\n  },\n   \"mainImage\": images[0].image.asset->url\n}[0..1] | order(date desc)": GetFeaturedProjectsResult;
    "*[_type == \"project\" && slug.current == $slug]{\n  title,\n  slug,\n  date,\n  status,\n  description,\n  href,\n  source,\n  tools[]->{\n    name,\n    href,\n    iconSource,\n    iconName,\n    \"iconSvg\": iconSvg.asset->url\n  },\n  \"images\": images[].image.asset->url,\n  contentTitle,\n  content,\n}[0]": GetProjectBySlugResult;
    "*[_type == \"project\" && slug.current == $slug]{\n  slug,\n  description,\n  \"images\": images[0].image.asset->url,\n  contentTitle,\n}[0]": GetProjectMetadataResult;
    "*[_type == \"project\"]{\n  \"slug\": slug.current,\n  \"publishedAt\": date,\n}": GetProjectsForSEOResult;
    "*[_type == \"faq\"]{\n  index,\n  question,\n  answer,\n} | order(index asc)": GetFaqsResult;
    "*[_type == \"metadata\" && slug.current == $slug]{\n  \"slug\": slug.current,\n  title,\n  description,\n}[0]": GetMetadataResult;
    "*[_type == \"project\"]{\n  title,\n  slug,\n  featured,\n  date,\n  status,\n  description,\n  href,\n  source,\n  tools[]->{\n    name,\n    href,\n    iconSource,\n    iconName,\n    \"iconSvg\": iconSvg.asset->url\n  },\n   \"mainImage\": images[0].image.asset->url\n} | order(date desc)": GetProjectsResult;
    "*[_type == \"tool\"]{\n  name,\n  href,\n  iconSource,\n  iconName,\n  \"iconSvg\": iconSvg.asset->url\n}": GetToolsResult;
  }
}
